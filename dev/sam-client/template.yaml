AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
    sam-client

    Sample SAM Template for sam-client
    
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
    Function:
        Timeout: 3

    Api:
      # enable CORS; to make more specific, change the origin wildcard
      # to a particular domain name, e.g. "'www.example.com'"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

Parameters:
  ENV:
    Type: String
    Default: "development"
    Description: Target Environment
  API:
    Type: String
    Default: "http://127.0.0.1:3000/api"
    Description: API URL

Resources:

    HelloWorldFunction:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            CodeUri: api/hello_world/
            Handler: app.lambda_handler
            Runtime: ruby2.5
            Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
                Variables:
                    PARAM1: VALUE
            Events:
                HelloWorld:
                    Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
                    Properties:
                        Path: /api/hello
                        Method: get
    SinatraFunction:
      Type: 'AWS::Serverless::Function'
      Properties:
        Handler: lambda.handler
        Runtime: ruby2.5
        Environment:
          Variables:
            RACK_ENV: !Ref ENV
            API_URL: !Ref API
        CodeUri: "./"
        MemorySize: 512
        Timeout: 30
        Events:
          SinatraApi:
            Type: Api
            Properties:
              Path: /
              Method: ANY
              RestApiId: !Ref SinatraAPI
    SinatraAPI:
      Type: AWS::Serverless::Api
      Properties:
        StageName: Prod
        DefinitionBody:
          swagger: '2.0'
          basePath: '/Prod'
          info:
            title: !Ref AWS::StackName
          paths:
            /{proxy+}:
              x-amazon-apigateway-any-method:
                responses: {}
                x-amazon-apigateway-integration:
                  uri:
                    !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                  passthroughBehavior: "when_no_match"
                  httpMethod: POST
                  type: "aws_proxy"
            /:
              get:
                responses: {}
                x-amazon-apigateway-integration:
                  uri:
                    !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                  passthroughBehavior: "when_no_match"
                  httpMethod: POST
                  type: "aws_proxy"
    ConfigLambdaPermission:
      Type: "AWS::Lambda::Permission"
      DependsOn:
        - SinatraFunction
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref SinatraFunction
        Principal: apigateway.amazonaws.com

Outputs:

    HelloWorldApi:
      Description: "API Gateway endpoint URL for Prod stage for Hello World function"
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/hello/"

    HelloWorldFunction:
      Description: "Hello World Lambda Function ARN"
      Value: !GetAtt HelloWorldFunction.Arn

    HelloWorldFunctionIamRole:
      Description: "Implicit IAM Role created for Hello World function"
      Value: !GetAtt HelloWorldFunctionRole.Arn

    SinatraAppUrl:
      Description: App endpoint URL
      Value: !Sub "https://${SinatraAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
